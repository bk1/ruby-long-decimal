#!/usr/bin/env ruby
#
# testlongdecimal.rb -- runit test for long-decimal.rb
#
# (C) Karl Brodowsky (IT Sky Consulting GmbH) 2006-2015
#
# TAG:       $TAG pre-v1.00.03$
# CVS-ID:    $Header: /var/cvs/long-decimal/long-decimal/test/testlongdecimal-extra.rb,v 1.26 2009/05/09 23:54:46 bk1 Exp $
# CVS-Label: $Name:  $
# Author:    $Author: bk1 $ (Karl Brodowsky)
#

require 'test/unit'

# require "runit/testcase"
# require "runit/cui/testrunner"
# require "runit/testsuite"

load "lib/long-decimal.rb"
load "lib/long-decimal-extra.rb"
load "test/testlongdeclib.rb"

LongMath.prec_overflow_handling = :warn_use_max

#
# test class for LongDecimal and LongDecimalQuot
#
class TestLongDecimalExtra_class < Test::Unit::TestCase # RUNIT::TestCase
  include TestLongDecHelper

  @RCS_ID='-$Id: testlongdecimal-extra.rb,v 1.26 2009/05/09 23:54:46 bk1 Exp $-'

  MAX_FLOAT_I = (Float::MAX).to_i

  # SLOW!!!
  def test_lm_power1u
    print "\ntest_lm_power1u [#{Time.now}] (2 hours): "
    check_power_floated(LongDecimal("0.99999999999999999999999999999999999999999999999999992269999999999999999990289999999999999999450000000000597529000000000000001501166000000000000085972840999953811008406809999999825939805325"),
                        LongDecimal("714285714285714285714285714.2857142367346938756989795918367346938775543790087466096793002963472667638481661974177164821324438268046647105967619250931245847564869975795833510071"),
                        25)
    puts "u"
  end

  # SLOW!!!
  def _test_lm_power1v
    print "\ntest_lm_power1v [#{Time.now}] (2 hours): "
    check_power_floated(LongDecimal("0.999999999999999999072867000000000000859575599688999999203059095533538363738068211580703976213177165458547180420859035425970198975506846513796073745523480165"),
                        LongDecimal("34260010678356060340110500.7153234888531563303375970232929042708037751160246890208435860708347495272359620209409070219221760532838693330228630931194027855701638117625325214394917620590686906959334466842413732434252133614001314264745394120941492068918606855981807681794442879762888899961878810388388032398007558964413624601333106812667470835155455035290542870179962369969203293410746331815980"),
                        4)
    puts "v"
  end

  # SLOW!!!
  def _test_lm_power1y
    print "\ntest_lm_power1y [#{Time.now}] (3 hours): "
    check_power_floated(LongDecimal("0.9999999999999999999999999999999999999999999938200000000000000000000000000000000000000000379683968899999999999999999999999999999999997667396464396000000000000000000000000000000014330439460181976721"),
                        LongDecimal("2277904328018223234624145785876970127.80132938289029176166582780311904615875187470778863280340852479308725681566723062546696023632646350474949485203212931524794058129718906431046410107451255702719381563833303042603168923"),
                        29)
    puts "y"
  end

  # SLOW!!!
  def _test_lm_power1e
    print "\ntest_lm_power1e [#{Time.now}] (2 hours): "
    check_power_floated(LongDecimal("0.0000000000000000000000000000000000000000000000000000000000000000002450257484405715360000000000000000097614149083200000000000000000000000972196"),
                        LongDecimal("-1.00000008600000184900000000000000000000000000000000000000012640000543520000000000000000000013300000571900000000000000399424000000000000000000000000000840560000000000000000000000000000442225"),
                        3)
    puts "e"
  end

  # SLOW!!!
  def _test_lm_power1f
    print "\ntest_lm_power1f [#{Time.now}] (2 hours): "
    check_power_floated(LongDecimal("0.999999999999983820000000000052544300000001372125483999980457478288050051600649560171986452284020178492146835403829341250837967306416835643061512149984415283328897050537606939603101940467080257495289168053434691062993302374332577706782680685214083677104079828206433042861334386773091111658939537092356816922764138900649581031721453211835260155666851398044388924204855221543729490461274063089475188763279119570"),
                        LongDecimal("80321932.89024988628926432624765785135567744505377819122460049392916097399960142838065367057138986526363804"),
                        40)
    puts "f"
  end

  # SLOW!!!
  def _test_lm_power1g
    print "\ntest_lm_power1g [#{Time.now}] (3 hours): "
    check_power_floated(LongDecimal("0.999999999999999999999999999999998351999999999999983020000000000002036927999998210041974559999999997978335404004424810825925120045592892314014072707890311225042124730264194167337496376801852022987153782535008598977724682635285958668331865904517437818865287190004735483899633845078360662820274644903126498781970492928578903950"),
                        LongDecimal("24449877750611246943765281173.594132029339853300733454400081300326994697544849684064538112517261374573394648075725881734888526076256999828217542217625441301525934675012853453406806380262764050867999"),
                        5)
    puts "g"
  end

  # FAILURE!!! (needs to be fixed)
  def _test_lm_power1h
    #  32) Failure:
    # test_lm_power1h(TestLongDecimalExtra_class) [/home/bk1/ruby/long-decimal/ruby/long-decimal/test/testlongdeclib.rb:537]:
    # u=log(z,7)=0.0000000 and yv=y*v=y*log(x,67)=-0.0000785 should be almost equal (unit=0.0000001 x=0.9999999999999999999999999999999999999999999999999999999999999992419999999999601999999916300000000000000000000000000000000000005745640000000603368000126905040400006662520000700569 y=103626942927112137297398420916877844574257389450065434211636.290893349001885021464207122860891972260613740163376239637940672943781241170230437221414760788160997546494517494155287108299429330120640311594334671250673655216674953919962963363315956632 z=1.0000000 u=0.0000000 v=-0.0000000000000000000000000000000000000000000000000000000000000007580 lprec=7 prec=7)

    print "\ntest_lm_power1h [#{Time.now}]: "
    check_power_floated(LongDecimal("0.999999999999999862599981980000014159073713922242243328677707050386499779178242565766291900177208859765599761583988066205590104341111429059119646260524293805643133602429678974677397380813589741657940554009198199034562447106122960905140273768835224006261013069576237942279008951360618433986"),
                        LongDecimal("10266940451745.37987679671457905534956086166404546967839388790271998098584221166751699838745542116653920000125768690393028114699714286512441385099525"),
                        14)
    puts "h"
  end

  # FAILURE!!! (needs to be fixed)
  def _test_lm_power1i
    #  33) Failure:
    # test_lm_power1i(TestLongDecimalExtra_class) [/home/bk1/ruby/long-decimal/ruby/long-decimal/test/testlongdeclib.rb:537]:
    # u=log(z,13)=-0.0111941165167 and yv=y*v=y*log(x,76)=-0.0111941184373 should be almost equal (unit=0.0000000000001 x=1.000000000000000000000000000000000000000000000000000000000000000040632256971361441675364911547119523862617306023293961145667519711601390076843063624462699881424344873551296525030641685492629965401733250018815534188264352396285608689080041860127898254008134983805964167477328233064049446442345195928792206909976566059881698019 y=-275498317635275642242287018621310530812854589333829844444179465.026486828659378492893391926808279692889516447254926463357381523771105223660032617000227932272791794838690719013665737808233622061943268216888533855404111493288875534126178784830550654618969484969704069638284634725831920698820381864995363361738394367829090059556279914810540013438298547827401014937988931120431027937060054429855616000850263332145848273205542636020219974448846631834726343291615390210989854686573686051987947338952241558404158600234046969306176292822304779868899689391647661253521411090531104030615753856329486732170039585239348687257061864897478622958348189113878179294939392893585430107561210696450698403851795968372396462047808473453132852141249623740994995021422532249082127739 z=0.98886830447251 u=-0.0111941165167 v=0.0000000000000000000000000000000000000000000000000000000000000000406322569714 lprec=13 prec=14)
    print "\ntest_lm_power1i [#{Time.now}]: "
    check_power_floated(LongDecimal("0.999999999999999981500000000000000256687499999999996834187500000000036604706930449997823687754750325053502286291757658419972795166437108241085949094447949893401640711985948839881287077716265593625727522425306777978451009970778400655052736724232660803755458234164496101454557290134193942433026948513566480800350007916601440691706219670728270104113540"),
                        LongDecimal("41380294430118397.455148144857963343847598908617723236165122243380531570432704458595232182042029429597565318650987561380534985825811466980798564531839364855305381553585381037046185516421336524897364607404185776449463"),
                        26)
    puts "i"
  end
#n0=0 n1=1 p
#1240.525842
#.
#test_to_f [Wed May 13 09:10:20 +0200 2009]: .
#Finished in 66832.216496 seconds.
#
#  1) Failure:
#test_lm_power1h(TestLongDecimalExtra_class)
#    [./test/testlongdeclib.rb:553:in `check_power_floated'
#     test/testlongdecimal-extra.rb:1834:in `test_lm_power1h']:
#u=log(z,7)=0.0000000 and yv=y*v=y*log(x,67)=-0.0000785 should be almost equal (unit=0.0000001 x=0.9999999999999999999999999999999999999999999999999999999999999992419999999999601999999916300000000000000000000000000000000000005745640000000603368000126905040400006662520000700569 y=103626942927112137297398420916877844574257389450065434211636.290893349001885021464207122860891972260613740163376239637940672943781241170230437221414760788160997546494517494155287108299429330120640311594334671250673655216674953919962963363315956632 z=1.0000000 u=0.0000000 v=-0.0000000000000000000000000000000000000000000000000000000000000007580 lprec=7 prec=7).
#<false> is not true.
#
#  2) Failure:
#test_lm_power1i(TestLongDecimalExtra_class)
#    [./test/testlongdeclib.rb:553:in `check_power_floated'
#     test/testlongdecimal-extra.rb:1842:in `test_lm_power1i']:
#u=log(z,13)=-0.0111941165167 and yv=y*v=y*log(x,76)=-0.0111941184373 should be almost equal (unit=0.0000000000001 x=1.000000000000000000000000000000000000000000000000000000000000000040632256971361441675364911547119523862617306023293961145667519711601390076843063624462699881424344873551296525030641685492629965401733250018815534188264352396285608689080041860127898254008134983805964167477328233064049446442345195928792206909976566059881698019 y=-275498317635275642242287018621310530812854589333829844444179465.026486828659378492893391926808279692889516447254926463357381523771105223660032617000227932272791794838690719013665737808233622061943268216888533855404111493288875534126178784830550654618969484969704069638284634725831920698820381864995363361738394367829090059556279914810540013438298547827401014937988931120431027937060054429855616000850263332145848273205542636020219974448846631834726343291615390210989854686573686051987947338952241558404158600234046969306176292822304779868899689391647661253521411090531104030615753856329486732170039585239348687257061864897478622958348189113878179294939392893585430107561210696450698403851795968372396462047808473453132852141249623740994995021422532249082127739 z=0.98886830447251 u=-0.0111941165167 v=0.0000000000000000000000000000000000000000000000000000000000000000406322569714 lprec=13 prec=14).
#<false> is not true.
#
#80 tests, 1176 assertions, 2 failures, 0 errors
#
#cnt=20 scnt=260386 x=0.99999999809400000272462699653790684212327923167722935691752021448135183712830149735067113046826817674110389288361912337463705957802376657702335749700798314944473920 y=14016828605.229042965917331361064350586327584437556924534090463600626715357538734008051507292464750810748277417205658813356642537822289293619791292844767138131743232242944645570112187845143267501194342716071677280642647656674561332793569479383179069520330679006689186482788505119536037905653050919954522177977214428461185762 scx=164 scy=312 prec=45
#.x0=1.0000000019060000009082090000000004540009404326628958200000000000000515292133802208999999999999999999999999999999999999999999999999999999999999999999999999999999999956 y0=-14016828605
#x0=1.0000000019060000009082090000000004540009404326628958200000000000000515292133802208999999999999999999999999999999999999999999999999999999999999999999999999999999999956 y0=-14016828605 point_shift=0 iprec=85 iprec2=170 iprec3=170
#F
#
#Finished in 260921.875 seconds.
#
#  1) Failure:
#TestRandomPower_class#test_random_power
#    [test/testlongdeclib.rb:35:in `assert_equal_float'
#     test/testlongdeclib.rb:526:in `check_power_floated'
#     test/testrandpower.rb:65:in `test_random_power'
#     test/testrandpower.rb:57:in `each'
#     test/testrandpower.rb:57:in `test_random_power'
#     test/testrandpower.rb:53:in `each'
#     test/testrandpower.rb:53:in `test_random_power'
#     /usr/local/lib/jruby/lib/ruby/1.8/runit/testcase.rb:42:in `run'
#     /usr/local/lib/jruby/lib/ruby/1.8/runit/testsuite.rb:23:in `run']:
#delta=5.83303085640147e-20 z=0.000000000002496639948060157264477214874021182=2.49663994806016e-12 and wf=2.49663899616166e-12 should be almost equal x=0.99999999809400000272462699653790684212327923167722935691752021448135183712830149735067113046826817674110389288361912337463705957802376657702335749700798314944473920=0.999999998094 y=14016828605.229042965917331361064350586327584437556924534090463600626715357538734008051507292464750810748277417205658813356642537822289293619791292844767138131743232242944645570112187845143267501194342716071677280642647656674561332793569479383179069520330679006689186482788505119536037905653050919954522177977214428461185762=14016828605.229 delta=5.83303085640147e-20 l=23.3635244879168 diff=9.51898500819349e-19 prec=45 corr=0.952999998637686501731046578938360384161385321541239892759324081435849251324664434765865911629448053558190438312681470210988116711488321251496008425277630400000000000=0.952999998637687 corr2=1.90599999727537300346209315787672076832277064308247978551864816287169850264932886953173182325889610711638087662536294042197623342297664250299201685055526080000000000=1.90599999727537 corr_f=.
#<2.49663994806016e-12> expected but was
#<2.49663899616166e-12>.
#
#1 tests, 246780 assertions, 1 failures, 0 errors
#
end

# RUNIT::CUI::TestRunner.run(TestLongDecimalExtra_class.suite)

# end of file testlongdecimal.rb

