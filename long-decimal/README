Version
-------

This version ($Name: ALPHA_01_03 $) is functionally mostly identical with the
previous alpha-0.01.02.  Support for rounding to any given set of last
digits, for example allowing only 0 and 5 as last digit, has been
added and tests for this kind of functionality are considered to be
complete.  This functionality is useful for rounding patterns within
currencies where the smallest unit is 0.05, not 0.01, like CHF.  In
this case, remainders 0 and 5 modulo 10 are required.  For currencies
where the smallest unit is 0.02, it would be 0, 2, 4, 8 modulo 10.
But this has been implemented in a more general way, so it would also
be possible to restrict the rounding results to any set modulo any
integral number >= 2.

Extensive testing has shown that apart from this new functionality
there seems to be an issue when calculating powers of LongDecimal
where the base is slightly less than 1 and the exponent is a big
positive number.  In some cases where this should result in 0, the
calculations seem to take time forever.  This issue should not stop
long-decimal from becoming beta, so its solution will be postponed and
it will be resolved temporarily by moving it to a different library.
Ideas how to solve these issues are there, so eventually this
power-functionality will be working even for these cases.

All other functionality did not show any bugs during intensive
testing, so it could be assumed that the whole library is good for
beta and maybe even production/stable, apart from the issues
mentioned above, which are being separated into another library.

This software development effort is hosted on RubyForge (
http://rubyforge.org/ ) under the project name "long-decimal", to be
found directly with http://rubyforge.org/projects/long-decimal/ .  So
you should feel encouraged to look if there is a newer version, when
you install long-decimal.

This version is an alpha-version, which might also be called
"pre-beta".  Operations +, -, *, / and sqrt should be working properly
and would justify calling this release at least beta.  Even log and exp
should be fine.  log, log2, log10 and exp have been tested
for more than a million random values and the current version should
cover all of these correctly.  But it is still possible, that in some
cases the result deviates in the last digit by 1 or 2 from the real
result.  A deviation of slightly more than half of the unit of the
last digit is already present.  Improving on this would require an
extensive extension of internal functionality to provide rounding
information in case of last digits being 50000..., where additional
digits would reveal if this really needs to be rounded up or down.
Because these functions are transcendental, at least exp and log will
always have either one of these true, it will never be exactly ....5.
Speed could be improved as well.

It would be a good idea to do some more mathematical analysis on how
many digits are needed internally to guarantee the correctness of the
digits that are provided.  But this will not be considered as a
requirement for the beta-version.

Test
----

Some runit tests have been included.  They give some indication of the
correctness of this library and allow changes to be checked in order
to make sure that what was running before would still work afterwards.
Tests for a library as complex as long-decimal can never be
exhaustive, but they give a good indication that methods are working
correctly.  The set of tests that is available now is considered to be
complete.  As a policy a release is not created unless all tests
succeed.  Running all tests can take a few minutes or even hours,
depending on your machine.  Whatever is gained by making the software
run faster is used up again by adding more tests.  This is the result
of the test:

Finished in 1160.808707 seconds.

131 tests, 45612 assertions, 0 failures, 0 errors

In addition random tests for exp, exp2, exp10, sqrt, log, log2 and
log10 can be run for a long time, using the script test/testrandom.rb.
Likewise tests for powers x to the yth with random x and y can be
tested for a long time using test/testrandpower.rb

These two require installation of the ruby-library crypt-isaac for its
random numbers, which works well with Linux or Windows and Cygwin.  If
you actually want to run this and find an error with it, please report
it with the lines of output revealing the bug on
http://rubyforge.org/projects/long-decimal/ -> tracker

Install
-------

(REMARK: installation has only been successfully tested on Linux with
ruby 1.8.4 and on Windows XP with Cygwin and ruby 1.8.4 and on Windows
2000 with ruby 1.8.2)

1. Using ruby-gems (preferred)
- open a shell window
- become root, unless the current user has the right to install gems
  (which is usually the case on windows)

  su

- uninstall old versions

  gem uninstall long-decimal

- install the newest version

  gem install long-decimal

- Usage from your ruby-programs:

  require "rubygems"
  require "long-decimal"

- documentation will be found in HTML-format in the directory
  $RUBY_DIR/gems/$RUBY_VERSION/doc/long-decimal-$LONG_DECIMAL_VERSION/rdoc/index.html
  where $RUBY_DIR is the directory containing your ruby-installation,
                  usually /usr/lib/ruby or /usr/local/lib/ruby on
                  Linux/Unix-systems.
        $RUBY_VERSION is the major version of your Ruby, like 1.8
        $LONG_DECIMAL_VERSION is the version of long-decimal that you
                              have installed, like 0.00.20
  on my machine that would be
  /usr/local/lib/ruby/gems/1.8/doc/long-decimal-0.00.20/rdoc/index.html

2. Installing from the sources (it is preferred to use the
   gem-installation, but since long-decimal is open-source-software you
   are off course granted the right to download the source and change
   it and install your own version.)

- download the newest source-tar.gz-file from long-decimal project at rubyforge
  which can be found by
  http://rubyforge.org/projects/long-decimal/ -> Files
  ( http://rubyforge.org/frs/?group_id=1334 )
- open a shell window
  cd to the directory where you have downloaded the .tar.gz-file
  unpack the file using tar
  tar xfzvv long-decimal-alpha-1_00.tar.gz
  cd long-decimal
- now you can use rake for several operations
  - rake test
      runs runit tests.  All tests should succeed.
  - rake doc
      creates the documentation
  - rake gem creates the gem-file in a sub-directory pkg
      recommended for installation, proceed as in 1
  - cd pkg
  - gem install --local long-decimal


3. The documentation can be created from the sources.  It is contained
in the gem-file.  It is not provided as a separate file any more.

Bugs
----

Calculations of the kind
0.99999999999 ** 12423153125316415423512345234
that are performed using LongMath.power tend to take forever, if the
exponent is really big.

Method round_to_allowed_remainders() of LongDecimal has not been
tested enough.

It is considered somewhat arbitrary to disallow calculation
exponential functions if the result could not be expressed as Float.
This limitation should be removed, even though it has to be added,
that results of exponentiation that go beyond Float can only be handled
at a great cost of performance, because they really need more than 300
digits.

Certain calculations are too slow.  Algorithms need to be optimized
for speed.  The goal is to keep the algorithms in Ruby-code as long as
possible to make it easier to optimize the algorithm.  If optimization
beyond this level will be needed, C-code might be used, preferably
based on an existing library.

Even though some mathematical background has already been invested,
more effort from the theoretical side is needed in order to choose
internal precision parameters in such a way that correctness of the
result to all given digits can be guaranteed with a minimum of
overhead.  Currently parameters are probably slightly too careful,
which slows calculations down.  But it is also possible that they are
insufficient for certain calculations, yielding wrong results.

rdoc-documentation and in-code comments are somewhat complete, but for
a sophisticated library like this additional external documentation
should be provided.  Currently this does not exist at all.

Please report any bugs you come across on
http://rubyforge.org/projects/long-decimal -> Tracker.

The status of long-decimal is considered to be alpha.

License
-------

Ruby's license or LGPL
Find copies of these licenses on http://www.gnu.org/ or http://www.ruby-lang.org/

Warranty
--------

This is a alpha-version.  Do not expect too much!  This is work in
progress!  I do not take any responsibility.  Please use it as it is,
change it according to the terms of the license or wait for a more
stable version (for which I can't take any warranty either...)

Author
------

Karl Brodowsky
http://www.velofahren.de/cgi-bin/mailform.cgi
(no direct mail address because I do not like spam)
